"""
StrategyDetectorWithPropagation 

StrategyDetector5Wfn’ínW_&e_–õW~Y
"""

import numpy as np
import math
import warnings
import logging
from typing import Dict, List, Tuple, Optional, Union, Any
from datetime import datetime, timedelta
from functools import lru_cache

# n
from sailing_data_processor.strategy.detector import StrategyDetector
from sailing_data_processor.strategy.points import StrategyPoint, WindShiftPoint, TackPoint, LaylinePoint

# -
logger = logging.getLogger(__name__)

class StrategyDetectorWithPropagation(StrategyDetector):
    """
    n’ínW_&eh
    
    StrategyDetectorÈπí5Wn,’ínW_
    ÿ¶j&e›§_–õW~Y
    """
    
    def __init__(self, vmg_calculator=None, wind_fusion_system=None):
        """
        
        
        Parameters:
        -----------
        vmg_calculator : OptimalVMGCalculator, optional
            VMG_
        wind_fusion_system : WindFieldFusionSystem, optional
            q
        """
        # n
        super().__init__(vmg_calculator)
        
        # q-
        self.wind_fusion_system = wind_fusion_system
        
        # ’à,-
        self.propagation_config = {
            'wind_shift_prediction_horizon': 1800,  # »à,	
            'prediction_time_step': 300,           # ,B	
            'wind_shift_confidence_threshold': 0.7, # <$
            'min_propagation_distance': 1000,      # ,	
            'prediction_confidence_decay': 0.1,    # ,<pBB_	
            'use_historical_data': True            # Nn(
        }
    
    def detect_wind_shifts_with_propagation(self, course_data: Dict[str, Any], 
                                         wind_field: Dict[str, Any]) -> List[WindShiftPoint]:
        """
        n’ínW_›§n
        
        Parameters:
        -----------
        course_data : Dict[str, Any]
            P
        wind_field : Dict[str, Any]
            n4
            
        Returns:
        --------
        List[WindShiftPoint]
            U_›§
        """
        if not wind_field or 'wind_direction' not in wind_field:
            return []
        
        # qLBp,»í÷ó
        predicted_shifts = []
        
        if self.wind_fusion_system and hasattr(self.wind_fusion_system, 'predict_wind_field'):
            try:
                # B
                reference_time = None
                if 'time' in wind_field:
                    reference_time = wind_field['time']
                elif 'start_time' in course_data:
                    reference_time = course_data['start_time']
                
                if reference_time:
                    # ,hB
                    horizon = self.propagation_config['wind_shift_prediction_horizon']
                    time_step = self.propagation_config['prediction_time_step']
                    
                    # ,B›§gn4,
                    for t in range(time_step, horizon + 1, time_step):
                        target_time = reference_time + timedelta(seconds=t)
                        
                        # n4,÷ó
                        predicted_field = self.wind_fusion_system.predict_wind_field(
                            target_time=target_time,
                            current_wind_field=wind_field
                        )
                        
                        if predicted_field:
                            # ,n4K»í
                            leg_shifts = self._detect_wind_shifts_in_legs(
                                course_data, predicted_field, target_time
                            )
                            
                            # ,<BLNgp
                            for shift in leg_shifts:
                                decay_factor = 1.0 - (t / horizon) * self.propagation_config['prediction_confidence_decay']
                                shift.shift_probability *= decay_factor
                            
                            predicted_shifts.extend(leg_shifts)
            
            except Exception as e:
                logger.error(f"»à,-kLzW~W_: {e}")
        
        # (nn4gnn	
        current_shifts = super().detect_wind_shifts(course_data, wind_field)
        
        # (h,n»íP
        all_shifts = current_shifts + predicted_shifts
        
        # Y›§»í’£
        filtered_shifts = self._filter_duplicate_shift_points(all_shifts)
        
        # $keDf’£
        threshold = self.propagation_config['wind_shift_confidence_threshold']
        final_shifts = [shift for shift in filtered_shifts 
                      if shift.shift_probability >= threshold]
        
        return final_shifts
    
    def _detect_wind_shifts_in_legs(self, course_data: Dict[str, Any], 
                                 wind_field: Dict[str, Any],
                                 target_time: datetime) -> List[WindShiftPoint]:
        """
        Ï∞Ön»í
        
        Parameters:
        -----------
        course_data : Dict[str, Any]
            P
        wind_field : Dict[str, Any]
            n4
        target_time : datetime
            aB
            
        Returns:
        --------
        List[WindShiftPoint]
            U_›§
        """
        # kLjD4oz»íY
        if 'legs' not in course_data:
            return []
        
        shift_points = []
        
        # kWf
        for leg in course_data['legs']:
            # —π›§LjD4o
            if 'path' not in leg or 'path_points' not in leg['path']:
                continue
            
            path_points = leg['path']['path_points']
            
            # —π›§LjYN4o
            if len(path_points) < 2:
                continue
            
            # Mn›§n1
            prev_wind = None
            
            # —π›§kWf
            for i, point in enumerate(path_points):
                # Mn1
                if 'lat' not in point or 'lon' not in point:
                    continue
                
                lat, lon = point['lat'], point['lon']
                
                # 1÷ó
                wind = self._get_wind_at_position(lat, lon, target_time, wind_field)
                
                # 1L÷ógMjD4o
                if not wind:
                    continue
                
                # Mn›§n1LB4»í
                if prev_wind:
                    # n
                    dir_diff = self._angle_difference(
                        wind['direction'], prev_wind['direction']
                    )
                    
                    # “¶H4
                    min_shift = self.config['min_wind_shift_angle']
                    if abs(dir_diff) >= min_shift:
                        # nMn(nhMnn	
                        midlat = (lat + path_points[i-1]['lat']) / 2
                        midlon = (lon + path_points[i-1]['lon']) / 2
                        
                        # <n!n1n<n	
                        confidence = min(
                            wind.get('confidence', 0.8),
                            prev_wind.get('confidence', 0.8)
                        )
                        
                        # 	'n
                        variability = max(
                            wind.get('variability', 0.2),
                            prev_wind.get('variability', 0.2)
                        )
                        
                        # ›§»í\
                        shift_point = WindShiftPoint(
                            position=(midlat, midlon),
                            time_estimate=target_time
                        )
                        
                        # 1-
                        shift_point.shift_angle = dir_diff
                        shift_point.before_direction = prev_wind['direction']
                        shift_point.after_direction = wind['direction']
                        shift_point.wind_speed = (prev_wind['speed'] + wind['speed']) / 2
                        
                        # <
                        raw_probability = confidence * (1.0 - variability)
                        
                        # “¶keOQ
                        # 'Mj{iÕÅ
                        angle_weight = min(1.0, abs(dir_diff) / 45.0)
                        shift_point.shift_probability = raw_probability * (0.5 + 0.5 * angle_weight)
                        
                        # ∆∏√Ø
                        strategic_score, note = self._calculate_strategic_score(
                            "wind_shift", "", "",
                            (midlat, midlon), target_time, wind_field
                        )
                        
                        shift_point.strategic_score = strategic_score
                        shift_point.note = note
                        
                        # k
                        shift_points.append(shift_point)
                
                # (n1X
                prev_wind = wind
        
        return shift_points
    
    def _filter_duplicate_shift_points(self, shift_points: List[WindShiftPoint]) -> List[WindShiftPoint]:
        """
        Y›§»í’£
        
        Parameters:
        -----------
        shift_points : List[WindShiftPoint]
            ›§n
            
        Returns:
        --------
        List[WindShiftPoint]
            ’£n›§
        """
        if len(shift_points) <= 1:
            return shift_points
        
        filtered_points = []
        sorted_points = sorted(shift_points, 
                              key=lambda p: self._normalize_to_timestamp(p.time_estimate))
        
        for point in sorted_points:
            is_duplicate = False
            
            for existing in filtered_points:
                # MnkDK300m	
                position_close = self._calculate_distance(
                    point.position[0], point.position[1],
                    existing.position[0], existing.position[1]
                ) < 300
                
                # BkDK5	
                time_diff = self._get_time_difference_seconds(
                    point.time_estimate, existing.time_estimate
                )
                time_close = time_diff < 300
                
                # “¶L^<WfDK15	
                angle_similar = abs(self._angle_difference(
                    point.shift_angle, existing.shift_angle
                )) < 15
                
                # a
                if position_close and time_close and angle_similar:
                    # <LD
                    if point.shift_probability > existing.shift_probability:
                        # X›§»ínMH
                        filtered_points.remove(existing)
                        filtered_points.append(point)
                    
                    is_duplicate = True
                    break
            
            if not is_duplicate:
                filtered_points.append(point)
        
        return filtered_points
    
    def _normalize_to_timestamp(self, t) -> float:
        """
        Êßò„ÄÖ„Å™ÊôÇÈñìË°®Áèæ„Åã„ÇâÁµ±‰∏Ä„Åó„ÅüUNIX„Çø„Ç§„É†„Çπ„Çø„É≥„Éó„Çí‰ΩúÊàê
        
        Parameters:
        -----------
        t : any
            Êßò„ÄÖ„Å™ÊôÇÈñìË°®Áèæ(datetime, timedelta, int, floatÁ≠â)
            
        Returns:
        --------
        float
            UNIX„Çø„Ç§„É†„Çπ„Çø„É≥„ÉóÂΩ¢Âºè„ÅÆÂÄ§
        """
        if isinstance(t, datetime):
            # datetime„ÇíUNIX„Çø„Ç§„É†„Çπ„Çø„É≥„Éó„Å´Â§âÊèõ
            return t.timestamp()
        elif isinstance(t, timedelta):
            # timedelta„ÇíÁßí„Å´Â§âÊèõ
            return t.total_seconds()
        elif isinstance(t, (int, float)):
            # Êï∞ÂÄ§„ÅØ„Åù„ÅÆ„Åæ„Åæfloat„ÅßËøî„Åô
            return float(t)
        elif isinstance(t, dict):
            # ËæûÊõ∏Âûã„ÅÆÂ†¥Âêà
            if 'timestamp' in t:
                # timestamp„Ç≠„Éº„ÇíÊåÅ„Å§ËæûÊõ∏„ÅÆÂ†¥Âêà
                return float(t['timestamp'])
            else:
                # timestamp„Ç≠„Éº„Åå„Å™„ÅÑËæûÊõ∏„ÅÆÂ†¥Âêà„ÅØ„Ç®„É©„ÉºÈò≤Ê≠¢„ÅÆ„Åü„ÇÅÁÑ°ÈôêÂ§ß„ÇíËøî„Åô
                return float('inf')
        elif isinstance(t, str):
            try:
                # Êï∞ÂÄ§ÊñáÂ≠óÂàó„ÅÆÂ†¥Âêà„ÅØÊï∞ÂÄ§„Å´Â§âÊèõ
                return float(t)
            except ValueError:
                try:
                    # ISOÂΩ¢Âºè„ÅÆÊó•ÊôÇÊñáÂ≠óÂàó
                    dt = datetime.fromisoformat(t.replace('Z', '+00:00'))
                    return dt.timestamp()
                except ValueError:
                    # Â§âÊèõ„Åß„Åç„Å™„ÅÑÂ†¥Âêà„ÅØÁÑ°ÈôêÂ§ß
                    return float('inf')
        else:
            # „Åù„ÅÆ‰ªñ„ÅÆÂûã„ÅØÊñáÂ≠óÂàó„Å´Â§âÊèõ„Åó„Å¶„Åã„ÇâÊï∞ÂÄ§Âåñ
            try:
                return float(str(t))
            except ValueError:
                # Â§âÊèõ„Åß„Åç„Å™„ÅÑÂ†¥Âêà„ÅØÁÑ°ÈôêÂ§ßÔºàÂØæÂøú„Åô„ÇãÈ†ÜÂ∫èÔºâ
                return float('inf')
    def _get_time_difference_seconds(self, time1, time2) -> float:
        """
        pjB◊ìng÷óYp
        
        Parameters:
        -----------
        time1, time2 : any
            YB$datetime, timedelta, int, float, etc	
            
        Returns:
        --------
        float
            B		gMjD4o!P'
        """
        # !nBcWfnv$Y
        try:
            ts1 = self._normalize_to_timestamp(time1)
            ts2 = self._normalize_to_timestamp(time2)
            
            # DZKL!P'n4o
            if ts1 == float('inf') or ts2 == float('inf'):
                return float('inf')
                
            return abs(ts1 - ts2)
        except Exception as e:
            logger.error(f"B: {e}")
            # LzW_4o!P'Y
            return float('inf')
    
    def detect_optimal_tacks(self, course_data: Dict[str, Any], 
                          wind_field: Dict[str, Any]) -> List[TackPoint]:
        """
        ij√Ø›§»í
        
        Parameters:
        -----------
        course_data : Dict[str, Any]
            P
        wind_field : Dict[str, Any]
            n4
            
        Returns:
        --------
        List[TackPoint]
            U_i√Ø›§
        """
        # VMG_LjQpz»íY
        if not self.vmg_calculator:
            logger.warning("VMGCalculatorL-UfDjD_i√Ø›§nLgM~[")
            return []
        
        # hX≈í(ek5	
        return super().detect_optimal_tacks(course_data, wind_field)
    
    def detect_laylines(self, course_data: Dict[str, Any], 
                      wind_field: Dict[str, Any]) -> List[LaylinePoint]:
        """
        ›§»í
        
        Parameters:
        -----------
        course_data : Dict[str, Any]
            P
        wind_field : Dict[str, Any]
            n4
            
        Returns:
        --------
        List[LaylinePoint]
            U_›§
        """
        # VMG_LjQpz»íY
        if not self.vmg_calculator:
            logger.warning("VMGCalculatorL-UfDjD_›§nLgM~[")
            return []
        
        # hX≈í(ek5	
        return super().detect_laylines(course_data, wind_field)
    
    def _determine_tack_type(self, bearing: float, wind_direction: float) -> str:
        """
        √Ø/	$
        
        Parameters:
        -----------
        bearing : float
            Gn2L	
        wind_direction : float
            L9DfO	
            
        Returns:
        --------
        str
            √Ø ('port'~_o'starboard')
        """
        # h2Ln“¶
        relative_angle = self._angle_difference(bearing, wind_direction)
        
        # “¶g$j7KLe»ø√Ø	
        return 'port' if relative_angle < 0 else 'starboard'
    
    def _calculate_strategic_score(self, maneuver_type: str, 
                                 before_tack_type: str, 
                                 after_tack_type: str,
                                 position: Tuple[float, float], 
                                 time_point, 
                                 wind_field: Dict[str, Any]) -> Tuple[float, str]:
        """
        n&e
        
        Parameters:
        -----------
        maneuver_type : str
            n.^ ('tack', 'gybe', 'wind_shift'I)
        before_tack_type : str
            Mn√Ø ('port'~_o'starboard')
        after_tack_type : str
            –ån√Ø ('port'~_o'starboard')
        position : Tuple[float, float]
            nMn, L	
        time_point : any
            nB
        wind_field : Dict[str, Any]
            n4
            
        Returns:
        --------
        Tuple[float, str]
            (&e0-1	, )
        """
        score = 0.5  # ’©o-$
        note = "j&eÕÅ'"
        
        # 1÷ó
        wind = self._get_wind_at_position(position[0], position[1], time_point, wind_field)
        
        if not wind:
            return score, note
        
        # –øThkpj
        if maneuver_type == 'tack':
            # √Øn4
            wind_shift_probability = wind.get('variability', 0.2)
            
            # √Ø
            if before_tack_type != after_tack_type:
                # √ØgW_4
                if wind_shift_probability > 0.6:
                    # 	'nDgo√ØLÕÅ
                    score = 0.8
                    note = "n	kY_nÕÅj√Ø"
                elif wind.get('confidence', 0.5) < 0.4:
                    # <'nNDn-gn√Ø
                    score = 0.3
                    note = "n<'LND-gn√ØÍπØB	"
                else:
                    # j√Ø
                    score = 0.5
                    note = "j√Ø"
            
        elif maneuver_type == 'wind_shift':
            # n4
            shift_angle = abs(self._angle_difference(
                wind.get('direction', 0), 
                wind.get('before_direction', wind.get('direction', 0))
            ))
            
            if shift_angle > 20:
                # 'Mj
                score = 0.9
                note = "ÕÅj	›§"
            elif shift_angle > 10:
                # -n
                score = 0.7
                note = "YyM	"
            else:
                # Uj
                score = 0.5
                note = "j	"
            
            # n	n
            if 'before_speed' in wind and 'speed' in wind:
                speed_change = abs(wind['speed'] - wind['before_speed'])
                if speed_change > 5:
                    score += 0.1
                    note += "'MO		"
        
        # nMnL	kDK√Ø
        if 'lat_grid' in wind_field and 'lon_grid' in wind_field:
            # tek	
            pass
        
        return min(1.0, score), note
    
    def _filter_duplicate_tack_points(self, tack_points: List[TackPoint]) -> List[TackPoint]:
        """
        Y√Ø›§»í’£
        
        Parameters:
        -----------
        tack_points : List[TackPoint]
            √Ø›§n
            
        Returns:
        --------
        List[TackPoint]
            ’£n√Ø›§
        """
        # o _filter_duplicate_shift_points h^<
        if len(tack_points) <= 1:
            return tack_points
        
        filtered_points = []
        for point in tack_points:
            is_duplicate = False
            
            for existing in filtered_points:
                # MnkDK
                position_close = self._calculate_distance(
                    point.position[0], point.position[1],
                    existing.position[0], existing.position[1]
                ) < 200  # √Ø(koWDg$
                
                # VMG9L^<WfDK
                vmg_similar = abs(point.vmg_gain - existing.vmg_gain) < 0.05
                
                if position_close and vmg_similar:
                    # VMG9L'MD
                    if point.vmg_gain > existing.vmg_gain:
                        filtered_points.remove(existing)
                        filtered_points.append(point)
                    
                    is_duplicate = True
                    break
            
            if not is_duplicate:
                filtered_points.append(point)
        
        return filtered_points
    
    def _filter_duplicate_laylines(self, layline_points: List[LaylinePoint]) -> List[LaylinePoint]:
        """
        Y›§»í’£
        
        Parameters:
        -----------
        layline_points : List[LaylinePoint]
            ›§n
            
        Returns:
        --------
        List[LaylinePoint]
            ’£n›§
        """
        # o _filter_duplicate_shift_points h^<
        if len(layline_points) <= 1:
            return layline_points
        
        filtered_points = []
        for point in layline_points:
            is_duplicate = False
            
            for existing in filtered_points:
                # XxnK
                same_mark = point.mark_id == existing.mark_id
                
                # MnkDK
                position_close = self._calculate_distance(
                    point.position[0], point.position[1],
                    existing.position[0], existing.position[1]
                ) < 300
                
                if same_mark and position_close:
                    # <LD
                    if point.confidence > existing.confidence:
                        filtered_points.remove(existing)
                        filtered_points.append(point)
                    
                    is_duplicate = True
                    break
            
            if not is_duplicate:
                filtered_points.append(point)
        
        return filtered_points
    
    def _calculate_distance(self, lat1: float, lon1: float, lat2: float, lon2: float) -> float:
        """
        2n	
        
        Parameters:
        -----------
        lat1, lon1 : float
            ÀπnL
        lat2, lon2 : float
            BnL
            
        Returns:
        --------
        float
            	
        """
        # 0nJ	
        R = 6371000
        
        # LÈ∏¢k	
        lat1_rad = math.radians(lat1)
        lon1_rad = math.radians(lon1)
        lat2_rad = math.radians(lat2)
        lon2_rad = math.radians(lon2)
        
        # 
        dlat = lat2_rad - lat1_rad
        dlon = lon2_rad - lon1_rad
        
        # Haversinel
        a = math.sin(dlat/2)**2 + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(dlon/2)**2
        c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))
        distance = R * c
        
        return distance